# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - HousingRepairsSchedulingApi

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches:
      - main

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Install dotnet format
        run: dotnet tool update --global dotnet-format
      - name: Run dotnet format
        run: dotnet format --check --verbosity diagnostic
      - name: Setup Terraform
        if: always()
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Run Terraform format
        run: terraform fmt -check ./terraform

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"
      - name: Test
        run: dotnet test

  build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
          include-prerelease: true

      - name: Authenticate nuget
        run: dotnet nuget add source --username ${{ secrets.NUGET_AUTH_GITHUB_USERNAME }} --password ${{ secrets.NUGET_AUTH_GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/City-of-Lincoln-Council/index.json"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  infrastructure:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: "Provision Infrastructure"
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: "./terraform"
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" -backend-config="container_name=${{ secrets.STATE_CONTAINER_NAME }}" -backend-config="key=${{ secrets.STATE_KEY_NAME }}"
      - name: Setup tfvars
        run: |
          touch env.tfvars
          echo "azure_ad_tenant_id                        = \"${{ secrets.AZURE_AD_TENANT_ID }}\"" >> env.tfvars
          echo "service_plan_name                         = \"${{ secrets.SERVICE_PLAN_NAME }}\"" >> env.tfvars
          echo "resource_group_name                       = \"${{ secrets.RESOURCE_GROUP_NAME }}\"" >> env.tfvars
          echo "resource_group_location                   = \"${{ secrets.RESOURCE_GROUP_LOCATION }}\"" >> env.tfvars
          echo "app_service_name                          = \"${{ secrets.APP_SERVICE_NAME }}\"" >> env.tfvars
          echo "authentication_identifier_production      = \"${{ secrets.AUTHENTICATION_IDENTIFIER_PRODUCTION }}\"" >> env.tfvars
          echo "authentication_identifier_staging         = \"${{ secrets.AUTHENTICATION_IDENTIFIER_STAGING }}\"" >> env.tfvars
          echo "jwt_secret_production                     = \"${{ secrets.JWT_SECRET_PRODUCTION }}\"" >> env.tfvars
          echo "jwt_secret_staging                        = \"${{ secrets.JWT_SECRET_STAGING }}\"" >> env.tfvars
          echo "sentry_dsn                                = \"${{ secrets.SENTRY_DSN }}\"" >> env.tfvars
          echo "drs_api_address_production                = \"${{ secrets.DRS_API_ADDRESS_PRODUCTION }}\"" >> env.tfvars
          echo "drs_login_production                      = \"${{ secrets.DRS_LOGIN_PRODUCTION }}\"" >> env.tfvars
          echo "drs_password_production                   = \"${{ secrets.DRS_PASSWORD_PRODUCTION }}\"" >> env.tfvars
          echo "drs_contract_production                   = \"${{ secrets.DRS_CONTRACT_PRODUCTION }}\"" >> env.tfvars
          echo "drs_priority_production                   = \"${{ secrets.DRS_PRIORITY_PRODUCTION }}\"" >> env.tfvars
          echo "drs_api_address_staging                   = \"${{ secrets.DRS_API_ADDRESS_STAGING }}\"" >> env.tfvars
          echo "drs_login_staging                         = \"${{ secrets.DRS_LOGIN_STAGING }}\"" >> env.tfvars
          echo "drs_password_staging                      = \"${{ secrets.DRS_PASSWORD_STAGING }}\"" >> env.tfvars
          echo "drs_contract_staging                      = \"${{ secrets.DRS_CONTRACT_STAGING }}\"" >> env.tfvars
          echo "drs_priority_staging                      = \"${{ secrets.DRS_PRIORITY_STAGING }}\"" >> env.tfvars

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file="env.tfvars"

      - name: Terraform Apply
        id: terraform_apply
        run: terraform apply -auto-approve -var-file="env.tfvars"

  deploy-staging:
    name: "Deploy Staging"
    runs-on: ubuntu-latest
    needs: [test, format, build, infrastructure]
    environment:
      name: 'Staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_SERVICE_NAME }}
          slot-name: 'Staging'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}
          package: .
  deploy-production:
    name: "Deploy Production"
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ secrets.APP_SERVICE_NAME }}
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_PRODUCTION }}
          package: .
